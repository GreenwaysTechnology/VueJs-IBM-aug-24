Pre Knowledge:

1.HTML 5
2.CSS 3
3.Javascript -ES 5 and ES 6
4.Node js fundamentals - npm

Nice to have

react or angular

Lab setup:
node.js
vs code

What is vue.js?
  Vue.js is a javascript framework for building user interfaces.

User interfae:
1.desk top app
2.web apps which is running browser
3.Mobile apps
   native
   browser based
   hybrid app

   
javascript frameworks/libs for building user interfaces

1.JQuery
2.Angular js
3.React js
4.Angular 2.x 
5.Vue js
etc....

javascript frameworks for building server side apps
1.express js
2.hapi js
3.Moleculer
4.Loopback
5.nest js
............
6.Next js -react js
7.Nuxt js -vue js
etc.....

Vue is more popular for building browser based web applications.

What are different types of Web Applications?

Web History
https://home.web.cern.ch/science/computing/birth-web..

Technologies:

1.HTML 
2.HTTP protocal
3.Web server - Next Computer and Next Operating System
4.Line Mode web browser and editor

Types of Web Applications:

Server side web apps

1.Static web apps - 1989 to 1995
   -HTML
  Web app is prepared by hand written html documents, and hosted on server.

2.Dynamic Content Generation web apps -1996 to till date

   Web app is prepared by the special program called "cgi" , hosted on server.
   -CGI - C/Perl
   -J2EE - Java,JavaServlets
   -ASP  - Vbscript,VB
   -PHP  - Php

3.Web Services - ECOMMERCE(B2 to B2) - 1998 To till date
 DATA is exchanged between two systems 
  Common data formats
   -XML - SOAP web services
   -Multi format(JSON)- RESTFull Web Services / GraphQL 
.....................................................................................
			Client Side Web App
....................................................................................

1.In 2006, w3c published new spec called "HTML 5",as part of HTML5 , W3C Published new web spec called "Single Page web App" /SPA.

 html page is prepared dynamically at client side by the browser, data needed for html page is accessed with help of "REST" api.

After introduction of SPA technology many frameworks and libs were created.

1.Mustache.js
2.Angular.js
3.React
4.Angular
5.Vue.js
....................................................................................
			Vue js

Vue.js is javascript client side spa framework.


Vue vs React and Angular:
.........................

Vue brings best practices of react and angular in single place.

In React you write "UI Code called markup and application logic ,data representation" inside js.

const Counter =()=>{
  const [counter,setCounter] =useState(0)

 return <div>
	<h1>Counter {counter} </h1>
  </div>
}
In Angular you write "UI Code called markup and application logic ,data representation" separatly

 templates:'ui'
 inside class you write application

Angular has so much boiler plate code.

Vue brings every thing inside one place like templates, application logic,css files
more readable , less boiler plate code using simple /basic js syntax.

Like angular and react, "Vue" is also component driven.

Vue supports all compoent features such as "props,state"
.....................................................................................
			Vue as SPA framework - Client side technology
.....................................................................................

stack:
1.html
2.css
3.js

DOM programming:

  DOM is specification for building client side web apps, DOM spec introduced by w3c 
  DOM is implemented by js and html.

What is js and why js?

  JS is programming language , created by netscap communication , to manipulate HTML
  Document at browser.
  html is generated by server and sent to client(browser), the browser just display
  html, after display generally we cant modify the html.
  Js was created to update html after display(render) - Dynamic html technology.

 Using js if you change html at client side - DOM programming.

if you want to understand how dom works, we need to understand how html works.


HTML:
  It is also one of the programming language.

Like other languages such as c program

1.source code
  hello.c
2.compile the code
  hello.obj - compiled code
3.execute the code
  on runtime we execute the code

.....................................................................................
			How browser renders HTML
		    Internals of HTML Representation
....................................................................................

HTML is programming language -  DSL pl /declarative pl.


index.html -source code

<html>
<head></head>
<title><title>
<body>
  <div>
     <h1>Welcome</h1>
  </div>
</body>
</html>
-------------------Browser
loader---LOAD Code into browser
 |
   from file: or http:
 |
Parser : Parser is special compiler which converts source into lexcial tree(string tree)
 |
body
  div
     h1
        Welcome 
     h1
  div
body
|
 Complier-Compilation : Convert this into assembly
|
body -load xxx
  div
     h1
        Welcome 
     h1
  div
body
.....................................................................................

.....................................................................................
				Runtime  -  Allocate Memory for HTML
...........................................................................................				
HTML Execution engine : Request Os ,to allocate memory :Runtime

-LinkedList - c
body -Node
  div -Node
     h1 -Node
        Welcome -Node
     h1
  div
body

-Nodes are connected each other in hierachical structure(tree)
 
Linking the Nodes: Tree (c)

body  -Node
  |
  div -Node
    |
     h1 -Node
      |
        Welcome -Node
        |
     h1
  div
body
 |
 |
Layout/Paint Engine: will convert nodes into pxs : final output
...................................................................................
			Nets cap and HTML Tree

Netscap started a project, to access rendered tree via program, to process(add,update,delete,iterate)

Netscap initally decided to introduce java program to access the tree, but since java was not suitable, netscap decided to create java like programming language - birth of javascript.

Java script language looks the HTML tree as objects - Object oriented HTML, every html element can be thought as object. - body - body object, div element-div object

Once the html has been rendered by the web browser, can we change the html(adding new element,updating existing element content,removing node,listing nodes).

The company called Netscap communcation, the second web browser creator after line mode web browser.

The NetsCap communication introduced the browser called netscap navigator , today firefox.

The netscap introduced a new technology called how to change html after rendering.

In 1996,Netscap communication,Started an RND project called "How to manipulate the tree"

Tree is written in c language,then we need another c program to communicate.

But NETSCAP decided not to use C pl.

Netscap wanted to put java like implementation inside browser to manipulate "Tree".

                        "The birth of Javascript"

How to access nodes from javascript engine?
  
One spec was published ,As per that spec - DOM
 "Document Object Model"
    -How to represent document(elements/nodes) in object oriented way.->DOM

 "Documents can be represented as Objects" : Object oriented Document Programming.

According to DOM?

Any html element is represented as "Node" inside browser engine, "Object" as inside javascript engine.

div = DIV object
.............................................................................................
				Birth of Frameworks and libs

...................................................................................
			Nets cap and HTML Tree

Netscap started a project, to access rendered tree via program, to process(add,update,delete,iterate)

Netscap initally decided to introduce java program to access the tree, but since java was not suitable, netscap decided to create java like programming language - birth of javascript.

Java script language looks the HTML tree as objects - Object oriented HTML, every html element can be thought as object. - body - body object, div element-div object

Once the html has been rendered by the web browser, can we change the html(adding new element,updating existing element content,removing node,listing nodes).

The company called Netscap communcation, the second web browser creator after line mode web browser.

The NetsCap communication introduced the browser called netscap navigator , today firefox.

The netscap introduced a new technology called how to change html after rendering.

In 1996,Netscap communication,Started an RND project called "How to manipulate the tree"

Tree is written in c language,then we need another c program to communicate.

But NETSCAP decided not to use C pl.

Netscap wanted to put java like implementation inside browser to manipulate "Tree".

                        "The birth of Javascript"

How to access nodes from javascript engine?




............................................................................................
How dom works?

index.html           Broser runtime(C program)         Javascript Engine
<h1>Hello</h1>       h1-Node                           h1- Object
			Hello-Node			 Hello Object Property



                Every Html ELEMENT Inside Browser is "C Program"

	        Every Html ELEMENT javascript engine is "Object"


javascript developer ---->uses api --->to communicate Object---->js engine---->browser engine.

.....................................................................................
				DOM Programming
.....................................................................................
How to implement dom programming?

1.using plain js
  if we use plain js , it is very difficult to build large applications

2.using frameworks and libs

2000 - The first javascript framework - DOJO
2002-2005 - JQuery - is the second most powerfull dom lib.
After 2006 - many js libs and frameworks introduced.. 2008(Angular js) 2013(react)...

Popular DOM frameworks/lib:
1.React
2.Angular
3.Vue.js
.....................................................................................
			Client side web apps and vue js
....................................................................................
Vue is client side web app framework.
but
Now a days vue can be used to build server side web apps as well

Vue js Application Types:
.........................

1.Standalone script application
    Enchancing html (generated by server) by adding js/ js lib(jquery)

 if you have traditional web apps written using server side technology like jsp,asp.net,php which "js/jquery"

   Vue js is declarative replacement of imperative "jquery"

2.Web components
   Vuejs supports to create web component based architecture applications

3.SPA
   Vue is primarily popular for building spa apps

Server side:
............
Full Stack:
  Building app using one single technology both front end and back end.
eg:
  Next.js
  Front End is react and back end is also react

  Nuxt.js
  Front end is vue and back end is also vue...

1.SSR :Server side Rending
   Full SSR
   Partial SSR
  SSR =  Server+ client => SPA(Client) + SERVER

2.SSG/Jamstack
  Static site generation.
  now a days people are building static web sites like 90's web app , in order to   improve high performance.
  Vue.js(Nuxt) can help to build SSG apps
  React.js(Next) can help to build SSG apps

You can use vue+NUXT
Based on ,use case we can pickup any one of the methods to build client side web apps, but most popular one is SPA,SSR

Vue js can be used to build any type of client side web apps(spa,ssr,ssg)
.....................................................................................
			 Getting started with Vue App
....................................................................................

What type of app we are going to build?

1.Standalone Script app
  We will see only basic level.

2.Single page web app
  We will explore very detailed

In case any app type , we need "tool" sets to create app.


There are two major tools we go with building vue.js apps

1.Without build tool
2.With build tool

1.Standalone Script app
   Without build tool.

if you plan without build tool means, you are planning to create 'standalone script'
....................................................................................
		    Project Setup- SSP (Standalone Script App)
...................................................................................

Steps

1.Creat Project

G:\IBM\2024\Aug>mkdir vue-ssp

G:\IBM\2024\Aug>cd vue-ssp

G:\IBM\2024\Aug\vue-ssp>

G:\IBM\2024\Aug\vue-ssp>mkdir src

G:\IBM\2024\Aug\vue-ssp>code .

outside src, create index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vue app</title>
</head>
<body>
    <h1>Vue SSP App</h1>
</body>
</html>

After adding html we need to run html, we need web server.

Vs code has plugin called "live server" which is built in web server- You have to install "live server" plugin(Extensions)

After running, we need to add "vue js" framwork.

in order to integrate vue with existing html

you have to add script which is distributed by vue community via "cdn".

There are two builds:
1.dev build
2.prod build


Dev Build

<script src="https://unpkg.com/vue@3"></script>

You are running a development build of Vue.
Make sure to use the production build (*.prod.js) when deploying for production.

index.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vue-legacy</title>
    <!-- This is dev build -->
    <script src="https://unpkg.com/vue@3"></script>
    <!-- This is production build -->
    <!-- <script src="https://unpkg.com/vue@3.1.1/dist/vue.global.prod.js"></script> -->
</head>
<body>
   
</body>

</html>

.....................................................................................
.....................................................................................
DOM Programming:
1.create element or elements 
   When we create elements we create tree model-DOM tree
2.update existing elements content
3.remove/delete existing element content and element itself
4.list/walk through tree
5.we may change style dynamically
6.we interact with ui and change the ui.


Vue is javascript dom programming framework 

There are two ways of programming in UI:

1.imperative programming
    The way of write program using complex logics, more boiler plate code.
eg:
  create element using plain js
  create element using jQuery

   <div id="root">

    </div>
    <script>
        function createElement() {
            console.log('create Element')
            const Heading = document.createElement('h1')
            Heading.innerHTML = 'Hello DOM!'
            Heading.style.color = 'blue'
            document.getElementById('root').appendChild(Heading)
        }
        createElement();
    </script>

2.declarative programming

 =>write less code
 =>Abstract DOM apis with readable constructs 
 =>introduce declarative templates

Note:
 Template driven technology introduced in server side computing in 1990's
 2006, the first template driven technology was introduced in javascript called
 mustache.js ( {{}}})
 Template = static + dynamic  content , where dynamic content is interpolated into code. 
 eg <h1>Hello {{name}} </h1>

 "Vue is based on declarative , which extends standard HTML with a template syntax"
				+
			   java script => binds the state(data)

...................................................................................
...................................................................................
How Vue represents UI?

=>Vue creates UI dynamically(DOM)
=>Vue Organizes the UI into Smaller and Smaller UI
=>Vue Breaks complex UI into Smaller UI
   This model is called Composition

Why Composition?
=>The UI can be reused any where in the app.
=>The code maintaince is very easy,because it is independant.

           This arch is called as "component driven arch"

.....................................................................................
		  Vue js and DOM element creation
....................................................................................

in order to begin with vue, we need to understand some of the vue.js objects.

Vue offers lot of objects.

Vue has two major versions

1.vue 2.x - old and legacy version
2.vue 3.x - modern and latest version

 There is lot of difference in vue 2 and vu3.
 we are going to discuss  both versions by comparsion.

1.Application Object/Vue instance

Pro Vue 3. (in vue 2.x)
var app = new Vue({   })


Vue 3:
1.1.Get Vue Instance

We can get Vue Instance 

A.Via Global Vue variable
B.Via ES 6 modules

.....................................................................................
			  A.Via Global Vue Instance variable	


How to get Vue instance?
 First we have to get Vue instance then only we can create application.

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>vueApp</title>
    <!-- <script src="https://unpkg.com/vue@3"></script> -->
    <script src="https://unpkg.com/vue@3.1.1/dist/vue.global.prod.js"></script>
</head>

<body>
    <h1>Vue js Application</h1>
    <script>
        //Vue is global variable provied by vue framework
        let vue = Vue
        console.log(vue)
    </script>
</body>

</html>

Vue instance is having so many methods(apis)
............................................

createApp: (...args) => {…}
createBlock: ƒ createBlock(type, props, children, patchFlag, dynamicProps)
createCommentVNode: ƒ createCommentVNode(text = '', // when used as the v-else branch, the comment node must be created as a // block to ensure correct updates. asBlock = false)
createElementBlock: ƒ createElementBlock(type, props, children, patchFlag, 

What is Application Object?

  Application object is object which is container object which encapsulate vue app.

How to create Application Object?

 in order to create application object, we need to get vue instance first.
How to create Application Object?

 in order to create application object, we need to get vue instance first.

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>vueApp</title>
    <!-- <script src="https://unpkg.com/vue@3"></script> -->
    <script src="https://unpkg.com/vue@3.1.1/dist/vue.global.prod.js"></script>
</head>

<body>
    <h1>Vue js Application</h1>
    <script>
        //Vue is global variable provied by vue framework
        let vue = Vue
        console.log(vue)
        //Vue Application object
        const app = vue.createApp()
        console.log(app)
    </script>
</body>

</html>
.....................................................................................
			B.Via ES 6 Modules
.....................................................................................

ES 6 module:
  import , export ,export default.

Can we use es6 modules directly inside browser?

No, in old browsers

Yes in modern browsers

Generallly browser has no facility to links files and share code using E6 modules keyword.

How to run es 6 modules based apps inside browsers

1.via build tools.
  webpack,roolup....

2.without build tool
   using browser only
  using script tag

eg
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script src="src/index.js" type="module"></script>
</body>
</html>

src/index.js
import { name } from "./name.js";

console.log(name)

src/name.js

export const name='Subramanian'
..................................................................................
			 ES 6 modules and html 
....................................................................................

in the last example we have used import and export  keywords inside js

Inside html we have used js via <script src="src/index.js" type="module"> 

Can we import js inside html directly?

Yes! we can

if you want to import any js code within html file, we have to use there is option called "importmap" option.


Syntax:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="importmap">
        {
            "imports":{
                
            }
        }
    </script>
</head>
<body>
    <!-- <script src="src/index.js" type="module"></script> -->
</body>
</html>

eg:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="importmap">
        {
            "imports":{
                "name":"./src/name.js"
            }
        }
    </script>
</head>

<body>
    <script type="module">
        import { name, age } from 'name'
        console.log(name, age)
    </script>
</body>

</html>

Note:
Import Maps Browser Support

Import maps are supported by default in Chromium-based browsers, so we recommend using Chrome or Edge during the learning process.

If using Firefox, it is only supported in version 102+ and currently needs to be enabled via the dom.importMaps.enabled option in about:config.

If your preferred browser does not support import maps yet, you can polyfill it with es-module-shims.

    <script async src="https://ga.jspm.io/npm:es-module-shims@1.5.5/dist/es-module-shims.js"></script>


eg:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script async src="https://ga.jspm.io/npm:es-module-shims@1.5.5/dist/es-module-shims.js"></script>
    <script type="importmap">
        {
            "imports":{
                "name":"./src/name.js"
            }
        }
    </script>
</head>

<body>
    <script type="module">
        import { name, age } from 'name'
        console.log(name, age)
    </script>
</body>

</html>
....................................................................................
			  Vuejs framework and es 6 module syntax


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script async src="https://ga.jspm.io/npm:es-module-shims@1.5.5/dist/es-module-shims.js"></script>
    <script type="importmap">
        {
            "imports":{
                "name":"./src/name.js",
                "vue":"https://unpkg.com/vue@3/dist/vue.esm-browser.js"
            }
        }
    </script>
</head>

<body>
    <script type="module">
        import { name, age } from 'name'
        import { createApp } from 'vue'
        console.log(name, age)
        const app = createApp()
        console.log(app)
    </script>
</body>

</html>
....................................................................................
			First User interface
.....................................................................................
Components:
  Representation of Userinterface.

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script async src="https://ga.jspm.io/npm:es-module-shims@1.5.5/dist/es-module-shims.js"></script>
    <script type="importmap">
        {
            "imports":{
                "vue":"https://unpkg.com/vue@3/dist/vue.esm-browser.js"
            }
        }
    </script>
</head>

<body>
    <div id="root">
        
    </div>
    <script type="module">
        //import factory method called createApp
        import { createApp } from 'vue'
        // Create dom element and insert into existing dom tree
        // create app instance
        const app = createApp({
            template:`
                <h1>Hello,Vue</h1>
            `
        })
        //console.log(app)
        app.mount("#root")
    </script>
</body>

</html>
.....................................................................................
			  User interface Development
.....................................................................................

User interface development guidelines:

1.User interface must be broken into smallar and smallar -  Compostion - Component model

2.User interface is organized in hierachal structure -  Tree Structure 
  Thats where html has been designed.
 We need to follow html tree model

 <div>
    <div>
	<div>
	   
	</div>
	
    </div>
 </div>

3.In tree model there must be one root element
..................................................................................

			Root Component(root Element)


Component Representations:

In React:
function Logo(){
   
   return <img src="logo.png"/>
 
}
In Angular

 @Component({
   selector:'app-logo'
   template:`<img src="logo.png"/>
 }) 
 export class Logo{

 }

In Vue:
 Component is literal object.

const Logo = { 

}

What component contains.

 Component information can be categorized into various segments.


1.UI/Rendering - HTML,CSS(Markup)
..................................
 template
 render
 compilerOptions


2.State -(data) - javascript
 data 
 props
 computed
 methods
 watch
 emits
 expose

3.Life Cycle hooks(methods)
beforeCreate
created
beforeMount
mounted
beforeUpdate
updated
beforeUnmount
unmounted
errorCaptured
renderTracked
renderTriggered
activated
deactivated
serverPrefetch

4.Composition
 provide
 inject
 mixins
 extends

Misc
name
inheritAttrs
components
directives

Component Instance api
$data
$props
$el
$options
$parent
$root
$slots
$refs
$attrs
$watch()
$emit()
$forceUpdate()
$nextTick()

eg:

 const Logo = {
  ui:{},
  state:{},
  others:{},
  methods:{}
 }
.....................................................................................
			 Vue Application Setup using build tools
.....................................................................................
Build tools are js based tools for create,manage js apps work flows.
Build tools based on npm tool.

Setup Vue Project using build tool based: CLI based apporach.
.............................................................

There are two cli tools

1.Vue-cli
  https://cli.vuejs.org/#getting-started
Vue- cli is now in maintance mode, meaning that , which is only used for creating old vue project(v2)

2.Vite
https://vitejs.dev/guide/
Next Generation Frontend Tooling project, used to create no of project types.


We are going to follow Vite base project setup

npm init vue@latest

This is abstraction for vite based project templates

>npm init vue@latest

vue-cli
 old pattern
vite
 modern pattern - recommended
 npm init vue@latest

This is abstraction for vite based project templates
 
G:\IBM\2024\Aug\vuejs>npm init vue@latest
Need to install the following packages:
create-vue@3.10.4
Ok to proceed? (y) y


> npx
> create-vue


Vue.js - The Progressive JavaScript Framework

√ Project name: ... vue-app
√ Add TypeScript? ... No / Yes
√ Add JSX Support? ... No / Yes
√ Add Vue Router for Single Page Application development? ... No / Yes
√ Add Pinia for state management? ... No / Yes
√ Add Vitest for Unit Testing? ... No / Yes
√ Add an End-to-End Testing Solution? » No
√ Add ESLint for code quality? ... No / Yes
√ Add Vue DevTools 7 extension for debugging? (experimental) ... No / Yes

Scaffolding project in G:\IBM\2024\Aug\vuejs\vue-app...

Done. Now run:

  cd vue-app
  npm install
  npm run dev


G:\IBM\2024\Aug\vuejs>cd vue-app

G:\IBM\2024\Aug\vuejs/vue-app>npm i

G:\IBM\2024\Aug\vuejs/vue-app>npm run dev


Project Structure:

package.json
{
  "name": "vue-app",
  "version": "0.0.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "vue": "^3.4.29"
  },
  "devDependencies": {
    "@vitejs/plugin-vue": "^5.0.5",
    "vite": "^5.3.1",
    "vite-plugin-vue-devtools": "^7.3.1"
  }
}
....

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <link rel="icon" href="/favicon.ico">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vite App</title>
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.js"></script>
  </body>
</html>

vite-config.js
import { fileURLToPath, URL } from 'node:url'

import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import vueDevTools from 'vite-plugin-vue-devtools'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    vue(),
    vueDevTools(),
  ],
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./src', import.meta.url))
    }
  }
})

src - source folder
  |
  assets -  folder where we keep global css and image fiels
  components -  where we can keeps components of app
  App.vue
  main.js -  always must be .js file- entry

App.vue
  All Components must be saved "ComponentName.vue"
App Root Component for the application

main.js 
import './assets/main.css'

import { createApp } from 'vue'
import App from './App.vue'

createApp(App).mount('#app')
....................................................................................
			 Vue coding style
....................................................................................

Vue coding can be classified into two category.

Vue 2.x and Vue 3.x

API classification:

1.Options API based Style - Vue 2.x and Vue 3.x
2.Composition API Based Style - Vue 3.x style
.....................................................................................
			 Components and Components creational Pattern
.....................................................................................

1.Plain java script pattern

App.js
export default {
  ....options
}
It is more imperative way of creating components

2.Single File Component Pattern - SFC Pattern

 It is more declarative way of creating components

 As name suggest, All component logic inside single file

Every Component have three major segement

1.template
   Collection of html elements and vue instructions

2.javascript
   colllection of variables,methods/functions

3.style
  css style for a component.

In Single File Component, we isloate very clearly into three sections

<script>
 // all js code 
</script>
<template>
  template code - html code
</template>
<style>
 css style for component
</style>

.....................................................................................
	      Plain javascript is usefull where there is no build workflow
		     SFC is usefull where there is build work flow		   

	      Plain javascript components are saved with "FileName.js" extension
	       SFC Components are saved with "FileName.vue" extension
...................................................................................

Plain javascript:
................
src/components/App.js

//component must be exported using export default

export default {
    template:`
        <h1>Vue Component</h1>
    `
    //rest of the options goes here
}
 
index.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script async src="https://ga.jspm.io/npm:es-module-shims@1.5.5/dist/es-module-shims.js"></script>
    <script type="importmap">
        {
            "imports":{
                "vue":"https://unpkg.com/vue@3/dist/vue.esm-browser.js",
                "app":"./src/components/App.js"
            }
        }
    </script>
</head>

<body>
    <div id="root">

    </div>
    <script type="module">
        import { createApp } from 'vue'
        import App from 'app'
        //inject root component
        const app = createApp(App)
        app.mount("#root")
    </script>
</body>

</html>
.....................................................................................				Component Composition
.....................................................................................

App -Root Component
 |
 Welcome Component


src/components/Welcome.js
export default {
   template: `
        <h1>Welcome To Vue Application</h1>
    `
}

src/components/App.js
import Welcome from "./Welcome.js"

//component must be exported using export default
export default {
    components: {
        Welcome
    },
    template: `
        <h1>Vue Component</h1>
        <Welcome></Welcome>
    `
    //rest of the options goes here
}
...

Assigment:

Build layout

  Page
   |
   Header
   Body
     Section1,Section2,Section3	
   Footer
.....................................................................................			             SFC Pattern
.....................................................................................

SFC pattern file, contains three segments.


1.template
   Collection of html elements and vue instructions

2.javascript
   colllection of variables,methods/functions

3.style
  css style for a component.

In SFC pattern, we isloate very clearly into three sections

SFC files are saved with ".vue" extension.


<script>
 // all js code 
</script>
<template>
  template code - html code
</template>
<style>
 css style for component
</style>

Eg:
<script>
 
</script>
<template>
  <div>
     <h1>Hello Vue</h1>
  </div>
</template>
<style>
</style>
...................................................................................
			 "Going foward we focus only  SFC pattern "
....................................................................................
Inside SFC, we can use either use "Options API" based style or "Composition API" based style.

			Commonality between both patterns
			 (Options API and Composition API)

1.Code segmentation is same for both patterns

<script>
 // all js code 
</script>
<template>
  template code - html code
</template>
<style>
 css style for component
</style>

.....................................................................................
			Options API pattern
.....................................................................................

In Options API pattern we return Object called "Option" Object,  which contains necessary configuration.

<script>
 export default {
     //options 
     
 }
</script>

Sample Configuration(Options)

<script>
 export default {
   components:[],
   props:['something']
   data() {
     return {}
   }
 }
</script>
.....................................................................................
			Composition API Pattern
.....................................................................................

=>It is vue 3.x style of writing code.
=>In this pattern, we define a component logic's using imported api functions
=>In this pattern, we can write js directly within script tag.
=>In composition pattern we have two style of coding.

		
			Composition API pattern
				|
	------------------------------------------------------------
        |                                                          |
   with setup function                                     with set attribute


with setup function:

1.It looks like Options api pattern but code refactoring has been done.
2.It looks like imperative style of compostion api.

<script>
// compostion api pattern;using setup function
export default {
    setup() {
        //all js initalization code will go
    }
}
</script>
<template>
    <h1>Compostion API pattern using setup function</h1>
</template>
<style></style>

with setup attribute:
.....................
=>It is same as setup function only but it is more declarative.
=>It has been built on the top of setup function...
=>We dont need to write extra code, vue compiler will write for us.

<script setup>
 //js code will go here
</script>
<template>
    <h1>Compostion API pattern using setup function</h1>
</template>
<style></style>

  				     Vue App
		   			|
			---------------------------------------  
			With Build tool                  Without build tool
				 |				|
			  SFC Component            	 Standalone script App
				|
	----------------------------------------------------------------
        |                                                             |
        |                                                             |

      Options Api                                              Composition Api
	 |                                                          |
   Vue 2 based apps                                           Vue 3 based apps
							        												|	
		  							|
				----------------------------------------------------
				|                                     	|
	      	with setup function                           with setup attribute



.....................................................................................
			SFC- Options API
.....................................................................................

1.Component Composition:

src/components/Hello.vue
<script>
</script>
<template>
    <div>
        <h1>Hello</h1>
    </div>
</template>
<style>
</style>
<script>
import Hello from './Hello.vue'
export default {
    components: {
        Hello
    }
}
</script>
<template>
    <Hello/>
</template>
<style>

</style>

src/App.vue

<script>
import Greeter from './components/Greeter.vue'
export default {
components: {
    Greeter
}
}
</script>
<template>
  <div>
    <Greeter/>
  </div>
</template>
<style>
</style>

Task:
Build layout like header,body with sections, with footer.
.....................................................................................
			SFC- Composition API -setup function
.....................................................................................

setup function:
...............

src/components/Address.vue
<script>
export default {
  setup() {},
};
</script>
<template>
  <div>
    <address>
      <p>10th street</p>
      <p>Gandhi Nagar</p>
      <p>Coimbatore</p>
      <p>Tamil Nadu</p>
    </address>
  </div>
</template>
<style></style>

src/components/User.vue
<script>
import Address from "./Address.vue";
export default {
  components: {
    Address,
  },
  setup() {},
};
</script>
<template>
  <div>
    <h1>User</h1>
    <h2>Subramanian</h2>
    <Address />
  </div>
</template>
<style></style>

src/App.vue
<script>
import User from './components/User.vue'
export default {
components: {
    User
},
setup(){

}
}
</script>
<template>
  <div>
    <User />
  </div>
</template>
<style></style>

.....................................................................................
			SFC- Composition API -setup attribute
.....................................................................................

src/components/Product.vue
<script setup>
</script>
<template>
    <h1>
        Product Page
    </h1>
</template>
<style>
</style>

src/components/Customer.vue
<script setup>
import Product from './Product.vue'
</script>
<template>
    <div>
        <h1>Customer Page</h1>
    </div>
    <Product/>
</template>
<style>
</style>

src/App.vue
<script setup>
import Customer from "./components/Customer.vue";
</script>
<template>
  <Customer />
</template>
<style></style>
....................................................................................
Task:
 Build layout  with Composition API using setup fun and setup attribute
.....................................................................................
		      Components -Registration -Advanced
.....................................................................................

A Vue Components needs to be "registered"  so that vue knows to locate its implementation when it is encountered in a template.

export default {
  components: { Hello}
}

<template>
   <Hello/>
</template>

Types of Registration:

1. Global Registration
 if components are registried globally, those components are called as "Global"
 Components

2. Local Registration
 if components are registried locally, those components are called as "Local"
 Components
eg:
export default {
  components: { Hello}
}

<template>
   <Hello/>
</template>

1. Global Registration /Global Components.

Application Object:
..................
 It is a container object which contains other objects (components...etc)

How to create Application Object?

 const app = createApp(RootComponent)

Here "app" is just variable points application Object

Application Object having lot of methods:

1.app.component()
2.app.use()
3.app.directive()
etc...

Global Components:
 Global comonents are created with application object

import { createApp } from 'vue'
import App from './App.vue'

const app = createApp(App)

app.component('my-component',{
  //component config
})
or

StatusBar.vue

app.component(StatusBar)

app.mount("#app")

//Retrive the Registred Component
const MyComponent = app.component('my-component',{
  //component config
})


eg;

src/components/StatusBar.vue
<script setup></script>
<template>
    <h2>Status Bar</h1>
</template>
<style>
</style>

src/main.js
// import './assets/main.css'

import { createApp } from 'vue'
import App from './App.vue'
import StatusBar from './components/StatusBar.vue'

const app = createApp(App)
//Global Component
app.component('StatusBar', StatusBar)

app.mount("#app")

//createApp(App).mount('#app')


How to use Global Component?

In Options Api:
..............
<script>
// import StatusBar from './components/StatusBar.vue'
export default {
    // components: {
    //     StatusBar
    // }
};
</script>
<template>
  <StatusBar />
</template>
<style></style>

Note:
 import statement is not necessary for global components.


In Composition Api:

Using setup fun:
<script>
// import StatusBar from './components/StatusBar.vue'
export default {
  setup() {},
};
</script>
<template>
  <StatusBar />
</template>
<style></style>

Using setup attribute:
<script setup>
// import StatusBar from './components/StatusBar.vue'
</script>
<template>
  <StatusBar />
</template>
<style></style>


Note:
 import statement is not necessary for global components.
.....................................................................................
			 Global Components vs Local Components
.....................................................................................
=>Global registration prevents build systems from removing unused components (a.k.a "tree-shaking").

=>If you globally register a component but end up not using it anywhere in your app, it will still be included in the final bundle.

=>Global registration makes dependency relationships less explicit in large applications. 

=>It makes it difficult to locate a child component's implementation from a parent component using it.
		....................................................................................
			 Component Naming Conventions
.....................................................................................

PascalCase names are valid JavaScript identifiers. This makes it easier to import and register components in JavaScript. It also helps IDEs with auto-completion.

<PascalCase /> makes it more obvious that this is a Vue component instead of a native HTML element in templates. It also differentiates Vue components from custom elements (web components).

This is the recommended style when working with SFC or string templates. However, as discussed in DOM Template Parsing Caveats, PascalCase tags are not usable in DOM templates.

The Component names can be kebab-case /dash case eg
   <app-root>
   <hello-world>
   
	Vue supports both cases , but highly recommened is Pascal Case

=>This can affect long-term maintainability similar to using too many global variables.

=>Global Components need to be imported inside any where


eg:

<script setup>
</script>
<template>
    <!-- Pascal Case -->
  <StatusBar />
  <!-- keb-case -->
   <status-bar></status-bar>
</template>
<style></style>
.....................................................................................
				Templates
....................................................................................

Template is representation of "View"

View is runtime representation of user interface
View is Typically DOM tree.

Types of templates:

1.Static template
   It is havingl only pure html tags

2.Dynamic templates
   Template is having html code and vue instructions

Vue instructions are special symbols and notations.


Data Binding:
   Passing data from the component to view  and View to component.


Types of data binding:
1.Interpolation
2.Property and props Binding
3.Attribute Binding
4.Event Binding
5.Two way data binding
6.Class and Style binding
....................................................................................
			 Design patterns in Vue.js

1.Angular uses "MVC" pattern
2.React uses "Flux" Pattern
3.Vue.js uses "MVC" pattern

M-Model- data
V-View - Presentation
C-Controller

MVC In Vue:
...........

<script>
   M + C ->logic
</script>
 
<template>
   View logic
</template>

<style>

</style>

Component encaspulate Model + Controller + View
.....................................................................................
				Interpolation
.....................................................................................

Transfering data (state) from controller to View.

State :
  State can be represented in ways

1.Primitives
   numbers,strings,booleans
2.Objects and Collections
   literal object and arrays

.....................................................................................
			Interpolation - SFC - Options API Pattern
.....................................................................................
  
Create new project

npm init vue@latest

Data configuration:

let options = {
 data: ?
 props: ?
 methods: ?

}
basic syntax: ES 5 Syntax
export default {
  data:function(){
    return {} //state object
  }

}

basic syntax: ES 6 Syntax
export default {
  data(){
    return {} //state object
  }

}

eg;
<script>
export default {
  components: {},
  data() {
    //you must return object
    return {
      name: "Subramanian",
    };
  },
};
</script>
<template>

</template>
<style></style>

How to bind /show the variable inside view?
 {{Variable}} - interpolation

<script>
export default {
  components: {},
  data() {
    //you must return object
    return {
      name: "Subramanian",
    };
  },
};
</script>
<template>
 <h1>Your name is {{name}}</h1>
</template>
<style></style>
....................................................................................

More data
<script>
export default {
  components: {},
  data() {
    //you must return object
    return {
      firstName: "Subramanian",
      lastName: "Murugan",
      status: true,
      address: {
        city: "Coimbatore",
        state: "Tamil nadu",
      },
    };
  },
};
</script>
<template>
  <div>
    <h2>{{ firstName }} {{ lastName }}</h2>
    <h2>{{ status ? "Available" : "Not Available"}}</h2>
    <p>
     {{address.city}},
    </p>
     <p>
     {{address.state}}
    </p>
  </div>
</template>
<style></style>
.....................................................................................
			Interpolation - SFC - Composition API Pattern
.....................................................................................

Using Setup function:
.....................

<script>
 setup(){
   return {} //state object
 }
</script>

<script>
export default {
  components: {
    
  },
  setup() {
    let firstName = "Subramanian";
    let lastName = "Murugan";
    let status = true;
    let address = {
      city: "Coimbatore",
    };
    //return state object
    return {
      firstName,
      lastName,
      status,
      address,
    };
  },
};
</script>
<template>
  <div>
    <h2>{{ firstName }} {{ lastName }}</h2>
    <h2>{{ status ? "Available" : "Not Available" }}</h2>
    <p>{{ address.city }},</p>
    <p>
      {{ address.state }}
    </p>
  </div>
</template>
<style></style>


Using Setup attribute:
......................
<script setup>
let firstName = "Subramanian";
let lastName = "Murugan";
let status = true;
let address = {
  city: "Coimbatore",
};
</script>
<template>
  <div>
    <h2>{{ firstName }} {{ lastName }}</h2>
    <h2>{{ status ? "Available" : "Not Available" }}</h2>
    <p>{{ address.city }},</p>
    <p>
      {{ address.state }}
    </p>
  </div>
</template>
<style></style>
....................................................................................
			Component Composition and Data binding
.....................................................................................

Options API:
src/components/Address.vue
<script>
export default {
  components: {},
  data() {
    return {
      address: {
        city: "Coimbatore",
        state: "Tamil nadu",
      },
    };
  },
};
</script>
<template>
  <p>{{ address.city }},</p>
  <p>
    {{ address.state }}
  </p>
</template>
<style></style>

src/components/Profile.vue
<script>
import Address from './Address.vue'
export default {
  components: {
    Address 
  },
  data() {
    return {
      firstName: "Subramanian",
      lastName: "Murugan",
      status: true
    };
  },
};
</script>
<template>
  <div>
    <h2>{{ firstName }} {{ lastName }}</h2>
    <h2>{{ status ? "Available" : "Not Available" }}</h2>
    <Address/>
  </div>
</template>
<style></style>

src/App.vue
<script>
import Profile from './components/Profile.vue'
export default {
  components: {
    Profile
  },
}
</script>
<template>
   <Profile/>
</template>
<style></style>
.....................................................................................
Composition API : Setup fun:
.............................
src/components/Address.vue
<script>
export default {
  components: {},
  setup () {
  let address ={
        city: "Coimbatore",
        state: "Tamil nadu",
      },
    return {
        address
    }
  }
};
</script>
<template>
  <p>{{ address.city }},</p>
  <p>
    {{ address.state }}
  </p>
</template>
<style></style>
	

src/components/Profile.vue

<script>
import Address from "./Address.vue";
export default {
  components: {
    Address,
  },
  setup() {
    let firstName = "Subramaian";
    let lastName = "Murugan";
    let status = true;
    return {
      firstName,
      lastName,
      status,
    };
  },
};
</script>
<template>
  <div>
    <h2>{{ firstName }} {{ lastName }}</h2>
    <h2>{{ status ? "Available" : "Not Available" }}</h2>
    <Address />
  </div>
</template>
<style></style>


src/App.vue
<script>
import Profile from "./components/Profile.vue";
export default {
  components: {
    Profile,
  },
  setup() {},
};
</script>
<template>
  <Profile />
</template>
<style></style>
.................................................................................

Using setup attribute:

src/components/Address.vue
<script>
let address = {
  city: "Coimbatore",
  state: "Tamil nadu",
};
</script>
<template>
  <p>{{ address.city }},</p>
  <p>
    {{ address.state }}
  </p>
</template>
<style></style>


src/components/Profile.vue
<script setup>
import Address from "./Address.vue";
let firstName = "Subramaian";
let lastName = "Murugan";
let status = true;
</script>
<template>
  <div>
    <h2>{{ firstName }} {{ lastName }}</h2>
    <h2>{{ status ? "Available" : "Not Available" }}</h2>
    <Address />
  </div>
</template>
<style></style>

src/App.vue
<script>
import Profile from "./components/Profile.vue";
</script>
<template>
  <Profile />
</template>
<style></style>







